# !pip install surprise

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
from datetime import datetime
import joblib
from surprise import KNNBasic, Reader, Dataset
# from PIL import Image


# C·∫•u h√¨nh trang
st.sidebar.image("hasaki_banner_5.jpg", use_container_width=True)
# st.title("Project 2: Recommender System")
st.title("HASAKI RECOMMENDER SYSTEM")

# Using menu
menu = ["Business Objective","Build Project","Recommend New Product"]
choice = st.sidebar.selectbox('Menu', menu) # G√°n menu v√†o sidebar
st.sidebar.write("""#### üü¢ Th√†nh vi√™n th·ª±c hi·ªán: 
                 Ho√†ng Ng·ªçc Thu·ª∑ Th∆∞∆°ng
    L√™ Duy Quang 
    ƒêinh C√¥ng C∆∞·ªùng""")
st.sidebar.write("""#### üü° Gi√°o vi√™n h∆∞·ªõng d·∫´n: 
                 C√¥ Khu·∫•t Thu·ª≥ Ph∆∞∆°ng""")
current_time = datetime.now()
st.sidebar.write(f"""#### üóìÔ∏è Th·ªùi gian b√°o c√°o:
                 {current_time.strftime('%d-%m-%Y')}""")


if choice == 'Business Objective':    
    # Th·ª±c hi·ªán c√°c c√¥ng vi·ªác khi ng∆∞·ªùi d√πng ch·ªçn Home
    st.subheader("Business Objective") 
    st.markdown(
    """
    X√¢y d·ª±ng h·ªá th·ªëng ƒë·ªÅ xu·∫•t ƒë·ªÉ h·ªó tr·ª£ ng∆∞·ªùi d√πng nhanh ch√≥ng l·ª±a ch·ªçn ƒë∆∞·ª£c s·∫£n ph·∫©m ph√π h·ª£p tr√™n Hasaki
    üëà ***l·ª±a ch·ªçn ph·∫ßn ƒë·ªÅ xu·∫•t tr√™n sidebar*** ƒë·ªÉ xem chi ti·∫øt.
    ### H·ªá th·ªëng s·∫Ω g·ªìm hai m√¥ h√¨nh g·ª£i √Ω ch√≠nh:
    - Collaborative filtering (Surprise)
    - Content-based filtering (Cosine Similarity)   
    """)
    st.image("Content-based-filtering-vs-Collaborative-filtering-Source.jpg", use_container_width=True)



elif choice == 'Build Project':
    # Thu·∫≠t to√°n 1. Collaborative filtering (Surprise)
    st.subheader("I. Collaborative filtering (Surprise)")

    # 1. Chu·∫©n b·ªã d·ªØ li·ªáu
    st.markdown("##### 1. Chu·∫©n b·ªã d·ªØ li·ªáu")
    st.markdown("""
    - **ƒê·ªçc d·ªØ li·ªáu**: T·∫£i d·ªØ li·ªáu t·ª´ file CSV ƒë·ªÉ x√¢y d·ª±ng m√¥ h√¨nh.
    - **X·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu**: Lo·∫°i b·ªè c√°c d√≤ng d·ªØ li·ªáu c√≥ gi√° tr·ªã `null` trong c√°c c·ªôt c·∫ßn thi·∫øt nh∆∞ `ma_khach_hang_idx`, `ma_san_pham_idx`, v√† `so_sao`.
    - **Ki·ªÉm tra v√† l·ªçc d·ªØ li·ªáu**:
      - Ki·ªÉm tra gi√° tr·ªã trong c·ªôt `so_sao` ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë√°nh gi√° n·∫±m trong kho·∫£ng h·ª£p l·ªá (1‚Äì5).
      - L·ªçc l·∫°i d·ªØ li·ªáu ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ gi·ªØ c√°c gi√° tr·ªã n·∫±m trong kho·∫£ng n√†y.
    - **S·ª≠ d·ª•ng th∆∞ vi·ªán Surprise**:
      - Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu v·ªÅ d·∫°ng th√≠ch h·ª£p cho Surprise b·∫±ng c√°ch s·ª≠ d·ª•ng `Reader` v·ªõi `rating_scale=(1, 5)`.
    """)

    # 2. Kh√°m ph√° d·ªØ li·ªáu
    st.markdown("##### 2. Kh√°m ph√° d·ªØ li·ªáu")
    st.markdown("""
    - Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n nh∆∞ s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng (`n_users`), s·ªë l∆∞·ª£ng s·∫£n ph·∫©m (`n_items`) trong t·∫≠p d·ªØ li·ªáu.
    """)

    # 3. ƒê√°nh gi√° c√°c thu·∫≠t to√°n
    st.markdown("##### 3. ƒê√°nh gi√° c√°c thu·∫≠t to√°n")
    st.markdown("""
    - **Danh s√°ch c√°c thu·∫≠t to√°n ƒë√£ tri·ªÉn khai**:
      - KNNBaseline
      - SVD (Singular Value Decomposition)
      - SVDpp (SVD++)
      - BaselineOnly
    - **Quy tr√¨nh ƒë√°nh gi√°**:
      - S·ª≠ d·ª•ng `cross_validate` v·ªõi c√°c ch·ªâ s·ªë RMSE v√† MAE ƒë·ªÉ ƒë√°nh gi√° c√°c thu·∫≠t to√°n tr√™n 5 l·∫ßn g·∫≠p (5-fold cross-validation).
      - Ghi l·∫°i th·ªùi gian hu·∫•n luy·ªán v√† k·∫øt qu·∫£ ƒë√°nh gi√° (RMSE, MAE).
      - K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u v√†o DataFrame `results_df` ƒë·ªÉ so s√°nh c√°c thu·∫≠t to√°n.
    """)
    st.image("B·∫£ngƒë√°nhgi√°thu·∫≠tto√°n.png", caption="B·∫£ng ƒë√°nh gi√° thu·∫≠t to√°n", use_container_width=True)

    # 4. T·ªëi ∆∞u h√≥a si√™u tham s·ªë
    st.markdown("##### 4. T·ªëi ∆∞u h√≥a si√™u tham s·ªë")
    st.markdown("""
    - **Thi·∫øt l·∫≠p l∆∞·ªõi t√¨m ki·∫øm**:
      - X√°c ƒë·ªãnh c√°c si√™u tham s·ªë nh∆∞ `k`, `min_k`, `sim_options` (ph∆∞∆°ng ph√°p ƒëo ƒë·ªô t∆∞∆°ng ƒë·ªìng: `pearson_baseline`, `cosine`, ‚Ä¶).
    - **T√¨m ki·∫øm v·ªõi GridSearchCV**:
      - T√¨m b·ªô si√™u tham s·ªë t·ªëi ∆∞u d·ª±a tr√™n ƒëi·ªÉm RMSE th·∫•p nh·∫•t.
      - In ra b·ªô si√™u tham s·ªë t·ªët nh·∫•t v√† ƒëi·ªÉm RMSE t∆∞∆°ng ·ª©ng.
    """)
    st.image("K·∫øtqu·∫£t·ªëi∆∞uh√≥asi√™uthams·ªë.png", caption="K·∫øt qu·∫£ t·ªëi ∆∞u h√≥a si√™u tham s·ªë", use_container_width=True)

    # 5. √Åp d·ª•ng m√¥ h√¨nh t·ªëi ∆∞u
    st.markdown("##### 5. √Åp d·ª•ng m√¥ h√¨nh t·ªëi ∆∞u")
    st.markdown("""
    - **Hu·∫•n luy·ªán m√¥ h√¨nh**:
      - S·ª≠ d·ª•ng m√¥ h√¨nh KNNBaseline v·ªõi c√°c si√™u tham s·ªë ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a.
      - T√°ch t·∫≠p d·ªØ li·ªáu th√†nh `trainset` v√† `testset`.
      - Hu·∫•n luy·ªán m√¥ h√¨nh tr√™n `trainset`.
    - **D·ª± ƒëo√°n v√† ƒë√°nh gi√°**:
      - Th·ª±c hi·ªán d·ª± ƒëo√°n tr√™n `testset`.
      - T√≠nh to√°n c√°c ch·ªâ s·ªë RMSE v√† MAE tr√™n t·∫≠p ki·ªÉm tra.
      - Hi·ªÉn th·ªã m·ªôt s·ªë d·ª± ƒëo√°n m·∫´u ƒë·ªÉ ki·ªÉm tra.
    """)
    st.image("KeÃÇÃÅtquaÃâtreÃÇntaÃ£ÃÇpkieÃÇÃâmtra.png", caption="K·∫øt qu·∫£ tr√™n t·∫≠p ki·ªÉm tra", use_container_width=True)

    # 6. G·ª£i √Ω s·∫£n ph·∫©m
    st.markdown("##### 6. G·ª£i √Ω s·∫£n ph·∫©m")
    st.markdown("""
    - **L·∫•y danh s√°ch s·∫£n ph·∫©m ƒë√£ ƒë√°nh gi√°**:
      - X√°c ƒë·ªãnh c√°c s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c kh√°ch h√†ng c·ª• th·ªÉ ƒë√°nh gi√° v√† s·∫Øp x·∫øp ch√∫ng theo `so_sao`.
    - **D·ª± ƒëo√°n cho s·∫£n ph·∫©m m·ªõi**:
      - D·ª± ƒëo√°n ƒëi·ªÉm s·ªë cho c√°c s·∫£n ph·∫©m ch∆∞a ƒë∆∞·ª£c kh√°ch h√†ng ƒë√°nh gi√°.
      - L·ªçc c√°c s·∫£n ph·∫©m c√≥ ƒëi·ªÉm d·ª± ƒëo√°n cao h∆°n ng∆∞·ª°ng t·ªëi thi·ªÉu (`min_rating = 4`).
      - S·∫Øp x·∫øp v√† ch·ªçn ra top 6 s·∫£n ph·∫©m c√≥ ƒëi·ªÉm d·ª± ƒëo√°n cao nh·∫•t ƒë·ªÉ g·ª£i √Ω.
    - **Hi·ªÉn th·ªã k·∫øt qu·∫£**:
      - K·∫øt h·ª£p v·ªõi th√¥ng tin s·∫£n ph·∫©m v√† kh√°ch h√†ng ƒë·ªÉ t·∫°o b√°o c√°o chi ti·∫øt.
    """)

    # 7. L∆∞u tr·ªØ m√¥ h√¨nh
    st.markdown("##### 7. L∆∞u tr·ªØ m√¥ h√¨nh")
    st.markdown("""
    - S·ª≠ d·ª•ng th∆∞ vi·ªán `joblib` ƒë·ªÉ l∆∞u l·∫°i m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán (`KNNBaseline`).
    """)

    # T·ªïng k·∫øt
    st.markdown("""
    ### K·∫øt qu·∫£ t·ª´ quy tr√¨nh tr√™n:
    - Qua c√°c th·ª≠ nghi·ªám v√† ƒë√°nh gi√°, nh·∫≠n th·∫•y r·∫±ng thu·∫≠t to√°n t·ªët nh·∫•t l√† KNNBaseline v·ªõi RMSE th·∫•p nh·∫•t sau khi t·ªëi ∆∞u h√≥a => Quy·∫øt ƒë·ªãnh ch·ªçn m√¥ h√¨nh ƒë·ªÉ s·ª≠ d·ª•ng cho h·ªá th·ªëng g·ª£i √Ω c·ªßa c·ª≠a h√†ng Hasaki.
    - **C√°c s·∫£n ph·∫©m ƒë∆∞·ª£c g·ª£i √Ω**: D·ª±a tr√™n ƒëi·ªÉm d·ª± ƒëo√°n cao nh·∫•t t·ª´ m√¥ h√¨nh.
    """)

    # Thu·∫≠t to√°n 2. Content-based filtering (Cosine Similarity)
    st.subheader("II. Content-based filtering (Cosine Similarity)")
    
    # ƒê·ªçc d·ªØ li·ªáu s·∫£n ph·∫©m
    data = pd.read_csv('san_pham_processed.csv')
    st.write("##### 1. Chu·∫©n b·ªã d·ªØ li·ªáu")
    st.dataframe(data[["ma_san_pham", "ten_san_pham", "gia_ban", "Content", "diem_trung_binh"]].head(3))

    st.write("##### 2. X·ª≠ l√Ω d·ªØ li·ªáu")
    st.markdown("""
    H√†m ti·ªÅn x·ª≠ l√Ω vƒÉn b·∫£n c∆° b·∫£n bao g·ªìm:
    1. Lo·∫°i b·ªè k√≠ t·ª± s·ªë.
    2. Lo·∫°i b·ªè c√°c k√≠ t·ª± ƒë·∫∑c bi·ªát.
    3. Lo·∫°i b·ªè c√°c t·ª´ stop words.
    """)
    st.image("process_text.jpg", use_container_width=True)
    st.dataframe(data[["Content", "Content_wt"]].head(3))

    st.write("##### 3. X√¢y d·ª±ng ma tr·∫≠n Consine Similarity")
    st.markdown("""
    - T·∫°o ma tr·∫≠n  Cosine Simalarity c·ªßa `1200 s·∫£n ph·∫©m`.
    """)
    st.image("cosine_matrix.jpg", use_container_width=True)

    st.write("##### 4. Vi·∫øt h√†m g·ª£i √Ω s·∫£n ph·∫©m")
    st.markdown("""
    - Vi·∫øt h√†m ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m t∆∞∆°ng t·ª± d·ª±a tr√™n ma tr·∫≠n  `Cosine Simalarity`.
    """)
    st.image("cosine_function.jpg", use_container_width=True)
    st.image("test_result.jpg",caption="K·∫øt qu·∫£ ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m m·ªõi",  use_container_width=True)       


elif choice == 'Recommend New Product':  
    # ƒê·ªçc d·ªØ li·ªáu s·∫£n ph·∫©m
    df_products = pd.read_csv('san_pham_processed.csv')    
    # Open and read file to cosine_sim_new
    with open('products_cosine_sim.pkl', 'rb') as f:
        cosine_sim_new = pickle.load(f)

    # T·∫£i d·ªØ li·ªáu t·ª´ file CSV
    df = pd.read_csv('training_data.csv')
    san_pham_df = pd.read_csv('san_pham_df.csv')
    df_khach_hang = pd.read_csv('df_khach_hang.csv')
    # T·∫£i m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán
    model_save_path = "KNNBaseline_model(1).joblib"
    algo = joblib.load(model_save_path)

    ###### Giao di·ªán Streamlit ######
    # H√¨nh ·∫£nh banner
    # Images to display
    images = [
        "https://media.hcdn.vn/hsk/1733466722homeintoyou612.jpg",
        "https://media.hcdn.vn/hsk/1733480371homerelocation71.jpg",
        "https://media.hcdn.vn/hsk/1733394042homehada0512.jpg",
        "https://media.hcdn.vn/hsk/17335501101733549968727-82231569.jpg",
        "https://media.hcdn.vn/hsk/1733466722homeintoyou612.jpg",
        "https://media.hcdn.vn/hsk/1731315128846x250.jpg",        
        "https://media.hcdn.vn/hsk/1733302154homecamp1212-0412.png",
        "https://media.hcdn.vn/hsk/1733221853homeduongam0312.jpg"
    ]
    # Custom HTML for the slider
    slider_html = f"""
    <div class="slider">
        {"".join(f'<img src="{img}" alt="Slide" class="slide">' for img in images)}
    </div>

    <style>
    .slider {{
        display: flex;
        overflow: hidden;
        width: 700px;
        height: 200px;
        position: relative;
        margin: 0 auto;
    }}
    .slide {{
        min-width: 100%;
        transition: transform 1s ease;
    }}
    </style>

    <script>
    let index = 0;
    const slides = document.querySelectorAll('.slide');

    function autoSlide() {{
        index++;
        if (index >= slides.length) {{
            index = 0;
        }}
        slides.forEach((slide, i) => {{
            slide.style.transform = `translateX(-${{index * 100}}%)`;
        }});
    }}

    setInterval(autoSlide, 3000); // Change slide every 3 seconds
    </script>
    """
    # Embed the HTML in Streamlit
    st.components.v1.html(slider_html, height=200)
    st.markdown("Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h·ªá th·ªëng ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m c·ªßa c·ª≠a h√†ng **Hasaki**! üéâüéâüéâ")  

    ########################################################################################################
    # L·ª∞A CH·ªåN THU·∫¨T TO√ÅN G·ª¢I √ù
    method = st.sidebar.radio("Ch·ªçn ph∆∞∆°ng ph√°p g·ª£i √Ω s·∫£n ph·∫©m", ("Content-Based Filtering", "Collaborative Filtering"))

    st.sidebar.header("Th√¥ng tin kh√°ch h√†ng")
    # L·ªçc danh s√°ch kh√°ch h√†ng ƒë√£ ƒë·ªÉ l·∫°i ƒë√°nh gi√°
    customers_with_reviews = df[df['so_sao'] > 0]['ma_khach_hang'].unique()
    customers_with_reviews_df = df_khach_hang[df_khach_hang['ma_khach_hang'].isin(customers_with_reviews)]
    # L·∫•y danh s√°ch 20 kh√°ch h√†ng c·ªë ƒë·ªãnh (ng·∫´u nhi√™n)
    fixed_customers = customers_with_reviews_df.sample(n=20, random_state=42)
    # Sidebar: Ch·ªçn kh√°ch h√†ng
    selected_customer_id = st.sidebar.selectbox(
        "Ch·ªçn kh√°ch h√†ng",
        fixed_customers['ma_khach_hang'].tolist(),
        format_func=lambda x: f"ID: {x} - {fixed_customers[fixed_customers['ma_khach_hang'] == x]['ho_ten'].values[0]}"
    )
    # T·ª± ƒë·ªông ƒëi·ªÅn m·∫≠t kh·∫©u
    password = "123"
    st.sidebar.text_input("M·∫≠t kh·∫©u (m·∫∑c ƒë·ªãnh)", password, type="password", disabled=True)
    # Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    def check_login(customer_id, password):
        if password == "123":
            customer_info = df_khach_hang[df_khach_hang['ma_khach_hang'] == customer_id]
            if not customer_info.empty:
                return customer_info.iloc[0]['ho_ten']  # Tr·∫£ v·ªÅ h·ªç t√™n kh√°ch h√†ng
        return None
    # ƒêƒÉng nh·∫≠p
    if 'customer_name' not in st.session_state:
        st.session_state.customer_name = None

    if st.sidebar.button("ƒêƒÉng nh·∫≠p"):
        customer_name = check_login(selected_customer_id, password)
        if customer_name:
            st.session_state.customer_name = customer_name
            st.success(f"Xin ch√†o {customer_name}!")
        else:
            st.error("ƒêƒÉng nh·∫≠p kh√¥ng th√†nh c√¥ng.")

    ########################################################################################################
    ## H√ÄM ƒê·ªÄ XU·∫§T CONTENT-BASED (CONSINE SIMILARITY)
    def get_recommendations(df, ma_san_pham, cosine_sim, nums=5):
        # Get the index of the product that matches the ma_san_pham
        matching_indices = df.index[df['ma_san_pham'] == ma_san_pham].tolist()
        if not matching_indices:
            print(f"No product found with ID: {ma_san_pham}")
            return pd.DataFrame()  # Return an empty DataFrame if no match
        idx = matching_indices[0]

        # Get the pairwise similarity scores of all products with that product
        sim_scores = list(enumerate(cosine_sim[idx]))
        # Sort the products based on the similarity scores
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
        # Get the scores of the nums most similar products (Ignoring the product itself)
        sim_scores = sim_scores[1:nums+1]
        # Get the product indices
        product_indices = [i[0] for i in sim_scores]
        # Filter the recommendations to include only products with rating > 4.0
        recommendations = df.iloc[product_indices]
        filtered_recommendations = recommendations[recommendations['diem_trung_binh'] > 4.0]
        # Return the top n most similar products as a DataFrame
        return filtered_recommendations

    # Hi·ªÉn th·ªã ƒë·ªÅ xu·∫•t ra b·∫£ng
    def display_recommended_products(recommended_products, cols=5):
        for i in range(0, len(recommended_products), cols):
            cols = st.columns(cols)
            for j, col in enumerate(cols):
                if i + j < len(recommended_products):
                    product = recommended_products.iloc[i + j]
                    with col:   
                        st.write(product['ten_san_pham'])       
                        st.write('###### üíµ Gi√° b√°n:', product['gia_ban'], 'VNƒê')
                        st.write('###### ‚≠ê Rating:', product['diem_trung_binh'])     
                        expander = st.expander(f"M√¥ t·∫£")
                        product_description = product['mo_ta']
                        truncated_description = ' '.join(product_description.split()[:100]) + '...'
                        expander.write(truncated_description)
                        expander.markdown("Nh·∫•n v√†o m≈©i t√™n ƒë·ªÉ thu nh·ªè.")                

    ########################################################################################################
    ## H√ÄM ƒê·ªÄ XU·∫§T COLLABORATIVE (SURPRISE)
    # H√†m r√∫t g·ªçn m√¥ t·∫£ s·∫£n ph·∫©m
    def truncate_description(description, max_words=20):
        words = description.split()
        if len(words) > max_words:
            return ' '.join(words[:max_words]) + '...'
        return description

    def display_products_with_rows(products_df, title, items_per_row=3):
        st.subheader(title)        
        # S·∫Øp x·∫øp l·∫°i c√°c s·∫£n ph·∫©m th√†nh danh s√°ch c·ªßa c√°c h√†ng
        rows = [products_df.iloc[i:i+items_per_row] for i in range(0, len(products_df), items_per_row)]        
        for row in rows:
            cols = st.columns(len(row))  # T·∫°o s·ªë c·ªôt t∆∞∆°ng ·ª©ng v·ªõi s·ªë s·∫£n ph·∫©m trong h√†ng
            for index, (col, (_, product)) in enumerate(zip(cols, row.iterrows())):
                with col:
                    st.markdown(f"### {product['ten_san_pham']}")
                    st.write(f"**Gi√° b√°n:** {product['gia_ban']} VNƒê")
                    st.write(f"**ƒêi·ªÉm d·ª± ƒëo√°n:** {product['EstimateScore']}")
                    # S·ª≠ d·ª•ng st.expander ƒë·ªÉ hi·ªÉn th·ªã m√¥ t·∫£ s·∫£n ph·∫©m
                    with st.expander("Xem m√¥ t·∫£ s·∫£n ph·∫©m", expanded=False):
                        truncated_description = truncate_description(product['mo_ta'])
                        st.write(f"**M√¥ t·∫£ ƒë·∫ßy ƒë·ªß:** {truncated_description}")

    # H√†m g·ª£i √Ω s·∫£n ph·∫©m Collaborative Filtering
    def recommend_products_for_collaborative(customer_id, df, algo, san_pham_df, df_khach_hang, top_n=6, min_rating=4):
        customer_purchased = df[df['ma_khach_hang'] == int(customer_id)][['ma_san_pham', 'so_sao']]
        if customer_purchased.empty:
            st.warning("Kh√°ch h√†ng n√†y ch∆∞a mua s·∫£n ph·∫©m n√†o.")
            show_highly_rated_products(san_pham_df, top_n=top_n)
            return None

        all_product_ids = df['ma_san_pham'].unique()
        products_to_predict = [product_id for product_id in all_product_ids if product_id not in customer_purchased['ma_san_pham'].tolist()]

        predictions_for_customer = []
        for product_id in products_to_predict:
            prediction = algo.predict(customer_id, product_id)
            predictions_for_customer.append(prediction)

        predictions_df = pd.DataFrame(
            [(pred.iid, pred.est) for pred in predictions_for_customer],
            columns=['ma_san_pham', 'EstimateScore']
        )
        filtered_predictions = predictions_df[predictions_df['EstimateScore'] >= min_rating] 
        if filtered_predictions.empty:
            st.warning("Kh√¥ng c√≥ s·∫£n ph·∫©m g·ª£i √Ω ph√π h·ª£p.")
            return None

        merged_df = filtered_predictions.merge(san_pham_df, on='ma_san_pham', how='left')
        final_recommendations = merged_df[merged_df['diem_trung_binh'] >= min_rating]
        final_recommendations = final_recommendations[['ma_san_pham', 'ten_san_pham', 'mo_ta', 'gia_ban', 'EstimateScore']]
        final_recommendations['ma_khach_hang'] = int(customer_id)
        final_recommendations = final_recommendations.merge(df_khach_hang[['ma_khach_hang', 'ho_ten']], on='ma_khach_hang', how='left')
        final_recommendations = final_recommendations.sort_values(by='EstimateScore', ascending=False).head(top_n)
        return final_recommendations
    
    ########################################################################################################   
    # THU·∫¨T TO√ÅN 1: Content-Based Filtering
    if method == "Content-Based Filtering": 
        # L·∫•y 15 s·∫£n ph·∫©m
        random_products = df_products.head(n=20)
        # print(random_products)

        # Gi·ªØ tr·∫°ng th√°i h·∫°n ch·∫ø nh·∫£y lung tung
        st.session_state.random_products = random_products
        # Ki·ªÉm tra xem 'selected_ma_san_pham' ƒë√£ c√≥ trong session_state hay ch∆∞a
        if 'selected_ma_san_pham' not in st.session_state:
            # N·∫øu ch∆∞a c√≥, thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† None ho·∫∑c ID s·∫£n ph·∫©m ƒë·∫ßu ti√™n
            st.session_state.selected_ma_san_pham = None

        # Theo c√°ch cho ng∆∞·ªùi d√πng ch·ªçn s·∫£n ph·∫©m t·ª´ dropdown
        # T·∫°o m·ªôt tuple cho m·ªói s·∫£n ph·∫©m, trong ƒë√≥ ph·∫ßn t·ª≠ ƒë·∫ßu l√† t√™n v√† ph·∫ßn t·ª≠ th·ª© hai l√† ID
        product_options = [(row['ten_san_pham'], row['ma_san_pham']) for index, row in st.session_state.random_products.iterrows()]
        st.session_state.random_products

        # Ng∆∞·ªùi d√πng ch·ªçn 1 s·∫£n ph·∫©m trong list random ho·∫∑c t·ª± nh·∫≠p v√†o m√£ s·∫£n ph·∫©m
        # T·∫°o m·ªôt dropdown v·ªõi options l√† c√°c tuple n√†y
        selected_product = st.selectbox(
            "Ch·ªçn s·∫£n ph·∫©m trong Dropbox",
            options=product_options,            
            format_func=lambda x: x[0]  # Hi·ªÉn th·ªã t√™n s·∫£n ph·∫©m
        )

        # Display the selected product
        st.write("B·∫°n ƒë√£ ch·ªçn:", selected_product)

        # C·∫≠p nh·∫≠t session_state d·ª±a tr√™n l·ª±a ch·ªçn hi·ªán t·∫°i
        st.session_state.selected_ma_san_pham = selected_product[1]

        if st.session_state.selected_ma_san_pham:
            st.write("M√£ s·∫£n ph·∫©m: ", st.session_state.selected_ma_san_pham)
            # Hi·ªÉn th·ªã th√¥ng tin s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn
            selected_product = df_products[df_products['ma_san_pham'] == st.session_state.selected_ma_san_pham]
            if not selected_product.empty:
                st.write('#### B·∫°n v·ª´a ch·ªçn:')
                st.write('### ', selected_product['ten_san_pham'].values[0])     

                original_price = 500000
                # Hi·ªÉn th·ªã gi√° g·ªëc v√† gi√° b√°n
                st.markdown(
                    f"""
                    <p style="font-size:16px;">
                        üíµGi√° g·ªëc: <span style="color: red; text-decoration: line-through;">{selected_product['gia_goc'].values[0]:,} VNƒê</span>
                    </p>
                    <p style="font-size:16px; font-weight: bold; color: green;">
                        üíµGi√° b√°n: {selected_product['gia_ban'].values[0]:,} VNƒê
                    </p>
                    """,
                    unsafe_allow_html=True,
                )

                st.write('###### ‚≠ê Rating:', selected_product['diem_trung_binh'].values[0])

                product_description = selected_product['mo_ta'].values[0]
                truncated_description = ' '.join(product_description.split()[:100])
                # st.write('##### **Th√¥ng tin s·∫£n ph·∫©m:**')
                st.markdown("""##### ***Th√¥ng tin s·∫£n ph·∫©m:*** """)
                st.write(truncated_description, '...')

                # ƒê·ªÅ xu·∫•t s·∫£n ph·∫©m li√™n quan
                st.markdown('##### ***C√°c s·∫£n ph·∫©m li√™n quan:***')
                recommendations = get_recommendations(df_products, st.session_state.selected_ma_san_pham, cosine_sim=cosine_sim_new, nums=3) 
                display_recommended_products(recommendations, cols=3)
            else:
                st.write(f"Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: {st.session_state.selected_ma_san_pham}")


    ########################################################################################################
    # THU·∫¨T TO√ÅN 2: Collaborative Filtering
    elif method == "Collaborative Filtering" and st.session_state.customer_name: 
        if st.sidebar.button("G·ª£i √Ω s·∫£n ph·∫©m"):
            recommended_products = recommend_products_for_collaborative(selected_customer_id, df, algo, san_pham_df, df_khach_hang)
            if recommended_products is not None:
                display_products_with_rows(recommended_products, f"üî∏S·∫£n ph·∫©m ƒë·ªÅ xu·∫•t cho kh√°ch h√†ng: {st.session_state.customer_name}")

            # Hi·ªÉn th·ªã s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ƒë√°nh gi√° b·ªüi kh√°ch h√†ng
            customer_purchased = df[df['ma_khach_hang'] == int(selected_customer_id)][['ma_san_pham', 'so_sao']]
            if not customer_purchased.empty:
                customer_purchased = customer_purchased.merge(
                    san_pham_df[['ma_san_pham', 'ten_san_pham', 'diem_trung_binh', 'gia_ban', 'mo_ta']],
                    on='ma_san_pham',
                    how='left'
                ).sort_values(by='so_sao', ascending=False)
                st.subheader(f"üî∏ S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ƒë√°nh gi√° b·ªüi kh√°ch h√†ng: {st.session_state.customer_name}")
                st.write(customer_purchased[['ma_san_pham', 'ten_san_pham', 'so_sao']])
            else:
                st.warning("Kh√°ch h√†ng n√†y ch∆∞a mua s·∫£n ph·∫©m n√†o.")


    

    